name: Axialy DB
on:
  workflow_dispatch:
    inputs:
      db_cluster_name: { description: "DigitalOcean DB-cluster name", required: true }
      region:          { description: "DO region (e.g. nyc3, sfo3, fra1)", default: sfo3 }
      size:            { description: "Cluster size slug",               default: db-s-1vcpu-1gb }

jobs:
  apply:
    runs-on: ubuntu-latest
    env: { TF_VAR_do_token: ${{ secrets.DO_PAT }} }

    steps:
    # 1 ─ checkout **only** folders we need (SQL + TF)
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
        sparse-checkout: |
          infra/database
          db
        sparse-checkout-cone-mode: false

    # 2 ─ Terraform
    - uses: hashicorp/setup-terraform@v3
      with: { terraform_version: 1.6.6, terraform_wrapper: false }

    - name: Terraform init
      working-directory: infra/database
      run: terraform init -input=false

    - name: Terraform apply
      id: tfout
      working-directory: infra/database
      run: |
        terraform apply -auto-approve -input=false \
          -var="db_cluster_name=${{ github.event.inputs.db_cluster_name }}" \
          -var="region=${{ github.event.inputs.region }}" \
          -var="db_size=${{ github.event.inputs.size }}"
        for o in db_host db_port db_user db_pass; do
          echo "$o=$(terraform output -raw $o)" >> "$GITHUB_OUTPUT"; done

    # 3 ─ import baseline schema
    - name: Load schema
      if: success()
      env:
        DB_HOST: ${{ steps.tfout.outputs.db_host }}
        DB_PORT: ${{ steps.tfout.outputs.db_port }}
        DB_USER: ${{ steps.tfout.outputs.db_user }}
        DB_PASS: ${{ steps.tfout.outputs.db_pass }}
      run: |
        sudo apt-get update -qq && sudo apt-get install -y mysql-client
        echo "Waiting for cluster to accept SSL connections…"; sleep 30
        for db in axialy_admin axialy_ui; do
          echo ">> $db"; mysql --ssl-mode=REQUIRED -h$DB_HOST -P$DB_PORT \
              -u$DB_USER -p$DB_PASS $db < "db/$db.sql"; done
        echo "✓ All schemas imported."

    # 4 ─ save creds as repo secrets
    - name: Persist secrets
      if: success()
      env: { GH_TOKEN: ${{ secrets.GH_PAT }} }
      run: |
        gh secret set DB_HOST     --body "${{ steps.tfout.outputs.db_host }}"
        gh secret set DB_PORT     --body "${{ steps.tfout.outputs.db_port }}"
        gh secret set DB_USER     --body "${{ steps.tfout.outputs.db_user }}"
        gh secret set DB_PASSWORD --body "${{ steps.tfout.outputs.db_pass }}"

    # 5 ─ summary
    - run: |
        echo "::notice title=Axialy DB::Cluster ready at \
        ${{ steps.tfout.outputs.db_host }}:${{ steps.tfout.outputs.db_port }}"
