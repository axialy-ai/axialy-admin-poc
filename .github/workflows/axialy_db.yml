name: Axialy DB

on:
  workflow_dispatch:
    inputs:
      db_cluster_name:
        description: "DigitalOcean DB-cluster name"
        required: true
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Cluster size slug"
        default: db-s-1vcpu-1gb

jobs:
  apply:
    runs-on: ubuntu-latest         # ← GitHub-hosted runner
    env:
      TF_VAR_do_token: ${{ secrets.DO_PAT }}

    steps:
    # ─────────────────────────────────────────────────────────
    # 1) Code checkout -- we need the *.sql dumps
    # ─────────────────────────────────────────────────────────
    - name: Checkout code
      uses: actions/checkout@v4

    # ─────────────────────────────────────────────────────────
    # 2) Terraform - create cluster + dbs + service user
    # ─────────────────────────────────────────────────────────
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform init
      working-directory: infra/database
      run: terraform init -input=false

    - name: Terraform apply
      id: tfout
      working-directory: infra/database
      run: |
        terraform apply -auto-approve -input=false \
          -var="db_cluster_name=${{ github.event.inputs.db_cluster_name }}" \
          -var="region=${{ github.event.inputs.region }}" \
          -var="db_size=${{ github.event.inputs.size }}"

        # expose outputs for later steps
        echo "db_host=$(terraform output -raw db_host)" >> "$GITHUB_OUTPUT"
        echo "db_port=$(terraform output -raw db_port)" >> "$GITHUB_OUTPUT"
        echo "db_user=$(terraform output -raw db_user)" >> "$GITHUB_OUTPUT"
        echo "db_pass=$(terraform output -raw db_pass)" >> "$GITHUB_OUTPUT"

    # ─────────────────────────────────────────────────────────
    # 3) ⚠️ NEW STEP ⚠️  - import baseline schema dumps
    # ─────────────────────────────────────────────────────────
    - name: Load baseline schema dumps
      if: success()
      env:
        DB_HOST: ${{ steps.tfout.outputs.db_host }}
        DB_PORT: ${{ steps.tfout.outputs.db_port }}
        DB_USER: ${{ steps.tfout.outputs.db_user }}
        DB_PASS: ${{ steps.tfout.outputs.db_pass }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y mysql-client

        # DigitalOcean clusters require SSL by default -> --ssl-mode=REQUIRED
        for db in axialy_admin axialy_ui; do
          echo ">> Importing into $db"
          mysql --ssl-mode=REQUIRED \
                --host="${DB_HOST}" --port="${DB_PORT}" \
                --user="${DB_USER}" --password="${DB_PASS}" "${db}" < "db/${db}.sql"
        done
        echo "✓ Schema imported successfully."

    # ─────────────────────────────────────────────────────────
    # 4) Store credentials as repository secrets (unchanged)
    # ─────────────────────────────────────────────────────────
    - name: Save DB credentials as repo secrets
      if: success()
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        if [ -z "$GH_TOKEN" ]; then
          echo "::warning::GH_PAT secret not set. Cannot update repository secrets automatically."
          exit 0
        fi

        gh secret set DB_HOST     --body "${{ steps.tfout.outputs.db_host }}"
        gh secret set DB_PORT     --body "${{ steps.tfout.outputs.db_port }}"
        gh secret set DB_USER     --body "${{ steps.tfout.outputs.db_user }}"
        gh secret set DB_PASSWORD --body "${{ steps.tfout.outputs.db_pass }}"
        echo "✓ Repository secrets updated."

    # ─────────────────────────────────────────────────────────
    # 5) Friendly summary (unchanged)
    # ─────────────────────────────────────────────────────────
    - name: Display next steps
      run: |
        echo "========================================"
        echo "Database cluster deployed & initialised!"
        echo "========================================"
        echo "Host : ${{ steps.tfout.outputs.db_host }}"
        echo "Port : ${{ steps.tfout.outputs.db_port }}"
        echo "User : ${{ steps.tfout.outputs.db_user }}"
        echo "========================================"
