name: Axialy DB

on:
  workflow_dispatch:
    inputs:
      db_cluster_name:
        description: "DigitalOcean DB-cluster name"
        required: true
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Cluster size slug"
        default: db-s-1vcpu-1gb

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      TF_VAR_do_token: ${{ secrets.DO_PAT }}

    steps:
    # 1  Checkout repo (to get the *.sql files)
    - name: Checkout code
      uses: actions/checkout@v4

    # 2  Terraform â€“ create cluster + DBs + service user
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform init
      working-directory: infra/database
      run: terraform init -input=false

    - name: Terraform apply
      id: tfout
      working-directory: infra/database
      run: |
        terraform apply -auto-approve -input=false \
          -var="db_cluster_name=${{ github.event.inputs.db_cluster_name }}" \
          -var="region=${{ github.event.inputs.region }}" \
          -var="db_size=${{ github.event.inputs.size }}"
        echo "db_host=$(terraform output -raw db_host)" >> "$GITHUB_OUTPUT"
        echo "db_port=$(terraform output -raw db_port)" >> "$GITHUB_OUTPUT"
        echo "db_user=$(terraform output -raw db_user)" >> "$GITHUB_OUTPUT"
        echo "db_pass=$(terraform output -raw db_pass)" >> "$GITHUB_OUTPUT"

    # 3  Import baseline schema
    - name: Import schema
      env:
        DB_HOST: ${{ steps.tfout.outputs.db_host }}
        DB_PORT: ${{ steps.tfout.outputs.db_port }}
        DB_USER: ${{ steps.tfout.outputs.db_user }}
        DB_PASS: ${{ steps.tfout.outputs.db_pass }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y mysql-client
        for db in axialy_admin axialy_ui; do
          echo "â¤µï¸Ž Importing $db.sql into $db"
          mysql --ssl-mode=REQUIRED \
                --host="$DB_HOST" --port="$DB_PORT" \
                --user="$DB_USER" --password="$DB_PASS" "$db" < "db/${db}.sql"
        done
        echo "âœ“ Schema import finished"

    # 4  Sanity checks â€“ fail fast if critical columns are missing
    - name: Verify critical tables / columns
      env:
        DB_HOST: ${{ steps.tfout.outputs.db_host }}
        DB_PORT: ${{ steps.tfout.outputs.db_port }}
        DB_USER: ${{ steps.tfout.outputs.db_user }}
        DB_PASS: ${{ steps.tfout.outputs.db_pass }}
      run: |
        set -euo pipefail
        function require_column() {
          local db="$1" table="$2" col="$3"
          local cnt
          cnt=$(mysql --ssl-mode=REQUIRED -N -B \
                --host="$DB_HOST" --port="$DB_PORT" \
                --user="$DB_USER" --password="$DB_PASS" \
                -e "SELECT COUNT(*) FROM information_schema.columns \
                    WHERE table_schema='${db}' AND table_name='${table}' AND column_name='${col}';")
          if [[ "$cnt" -eq 0 ]]; then
            echo "::error::Missing column ${db}.${table}.${col}"
            exit 1
          fi
        }
        require_column axialy_admin admin_users id
        require_column axialy_admin admin_users username
        require_column axialy_admin admin_users is_sys_admin
        require_column axialy_admin admin_user_sessions session_token
        echo "âœ“ All critical tables/columns present"

    # 5  Persist creds as repo secrets so the droplet workflow can reuse them
    - name: Save DB credentials as repo secrets
      if: success()
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        if [[ -z "$GH_TOKEN" ]]; then
          echo "::warning::GH_PAT secret not set â€“ skipping secret update"
          exit 0
        fi
        gh secret set DB_HOST     --body "${{ steps.tfout.outputs.db_host }}"
        gh secret set DB_PORT     --body "${{ steps.tfout.outputs.db_port }}"
        gh secret set DB_USER     --body "${{ steps.tfout.outputs.db_user }}"
        gh secret set DB_PASSWORD --body "${{ steps.tfout.outputs.db_pass }}"

    # 6  Friendly summary
    - name: Display next steps
      run: |
        echo "========================================"
        echo "Database cluster deployed & verified ðŸŽ‰"
        echo "Host : ${{ steps.tfout.outputs.db_host }}"
        echo "Port : ${{ steps.tfout.outputs.db_port }}"
        echo "User : ${{ steps.tfout.outputs.db_user }}"
        echo "========================================"
