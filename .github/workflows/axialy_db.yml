name: Axialy DB  (AWS RDS)

on:
  workflow_dispatch:
    inputs:
      db_instance_id:
        description: "RDS instance identifier"
        required: true
        default: axialy-db-prod
      db_instance_class:
        description: "RDS instance class"
        default: db.t3.small
      allocated_storage:
        description: "GB of storage"
        default: 20

jobs:
  apply:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    ${{ secrets.AWS_DEFAULT_REGION }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform init
      working-directory: infra/database
      run: terraform init -input=false

    - name: Terraform apply
      id: tfout
      working-directory: infra/database
      run: |
        terraform apply -auto-approve -input=false \
          -var="db_instance_id=${{ github.event.inputs.db_instance_id }}" \
          -var="db_instance_class=${{ github.event.inputs.db_instance_class }}" \
          -var="allocated_storage=${{ github.event.inputs.allocated_storage }}"

        echo "db_host=$(terraform output -raw db_host)"  >>"$GITHUB_OUTPUT"
        echo "db_port=$(terraform output -raw db_port)"  >>"$GITHUB_OUTPUT"
        echo "db_user=$(terraform output -raw db_user)"  >>"$GITHUB_OUTPUT"
        echo "db_pass=$(terraform output -raw db_pass)"  >>"$GITHUB_OUTPUT"

    - name: Import baseline schemas
      if: success()
      env:
        DB_HOST: ${{ steps.tfout.outputs.db_host }}
        DB_PORT: ${{ steps.tfout.outputs.db_port }}
        DB_USER: ${{ steps.tfout.outputs.db_user }}
        DB_PASS: ${{ steps.tfout.outputs.db_pass }}
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y mysql-client
        for db in axialy_admin axialy_ui ; do
          echo ">> loading schema $db"
          mysql --ssl-mode=REQUIRED -h "$DB_HOST" -P "$DB_PORT" -u "$DB_USER" -p"$DB_PASS" "$db" < "db/${db}.sql"
        done

    - name: Persist DB secrets in org
      if: success()
      env:
        GH_TOKEN: ${{ secrets.GH_PAT }}
      run: |
        gh secret set DB_HOST     --body "${{ steps.tfout.outputs.db_host }}"
        gh secret set DB_PORT     --body "${{ steps.tfout.outputs.db_port }}"
        gh secret set DB_USER     --body "${{ steps.tfout.outputs.db_user }}"
        gh secret set DB_PASSWORD --body "${{ steps.tfout.outputs.db_pass }}"
