name: Axialy Admin on AWS

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: EC2 instance Name tag
        required: true
        default: axialy-admin-prod
      region:
        description: AWS region
        required: true
        default: us-west-2
      instance_type:
        description: EC2 instance type
        required: true
        default: t3.small

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  EC2_KEY_PAIR: ${{ secrets.EC2_KEY_PAIR }}
  EC2_ELASTIC_IP_ALLOCATION_ID: ${{ secrets.EC2_ELASTIC_IP_ALLOCATION_ID }}
  EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  ADMIN_DEFAULT_USER: ${{ secrets.ADMIN_DEFAULT_USER }}
  ADMIN_DEFAULT_EMAIL: ${{ secrets.ADMIN_DEFAULT_EMAIL }}
  ADMIN_DEFAULT_PASSWORD: ${{ secrets.ADMIN_DEFAULT_PASSWORD }}

  SMTP_HOST: ${{ secrets.SMTP_HOST }}
  SMTP_PORT: ${{ secrets.SMTP_PORT }}
  SMTP_USER: ${{ secrets.SMTP_USER }}
  SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:

      # 1) Checkout only what we need
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            axialy-admin-product
            infra/ec2

      # 2) Terraform – provision / refresh instance
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        run: terraform -chdir=infra/ec2 init -input=false

      - name: Terraform apply
        id: tf_apply
        run: |
          terraform -chdir=infra/ec2 apply -auto-approve -input=false \
            -var="instance_name=${{ inputs.instance_name }}" \
            -var="region=${{ inputs.region }}" \
            -var="instance_type=${{ inputs.instance_type }}" \
            -var="key_name=$EC2_KEY_PAIR" \
            -var="elastic_ip_allocation_id=$EC2_ELASTIC_IP_ALLOCATION_ID"

          echo "INSTANCE_IP=$(terraform -chdir=infra/ec2 output -raw instance_public_ip)" >> "$GITHUB_ENV"

      # 3) Prepare SSH key
      - name: Prepare SSH key
        run: |
          echo "$EC2_SSH_PRIVATE_KEY" > pk.pem
          chmod 600 pk.pem

      # 4) Wait until the instance SSH port is reachable
      - name: Wait for SSH
        run: |
          for i in $(seq 1 60); do
            if ssh -o StrictHostKeyChecking=no -i pk.pem ubuntu@"$INSTANCE_IP" 'echo ok' >/dev/null 2>&1; then
              echo "Instance reachable."
              break
            fi
            echo "Waiting for instance… ($i/60)"
            sleep 10
          done

      # 5) Package application + .env and upload
      - name: Create application bundle
        run: tar -czf axialy-admin.tar.gz -C axialy-admin-product .

      - name: Create .env file
        run: |
          cat > axialy-admin.env <<EOF

      - name: Upload files
        run: |
          scp -o StrictHostKeyChecking=no -i pk.pem axialy-admin.tar.gz ubuntu@"$INSTANCE_IP":/home/ubuntu/
          scp -o StrictHostKeyChecking=no -i pk.pem axialy-admin.env   ubuntu@"$INSTANCE_IP":/home/ubuntu/

      # 6) Remote bootstrap (Nginx + PHP + deploy files)
      - name: Configure instance and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i pk.pem ubuntu@"$INSTANCE_IP" <<'SSH'
            set -euo pipefail

            sudo apt-get update -qq
            sudo apt-get install -y nginx php8.1-fpm php8.1-mysql \
                                    php8.1-curl php8.1-xml php8.1-zip \
                                    php8.1-gd php8.1-mbstring

            sudo mkdir -p /var/www/axialy-admin
            sudo tar -xzf /home/ubuntu/axialy-admin.tar.gz -C /var/www/axialy-admin
            sudo mv /home/ubuntu/axialy-admin.env /var/www/axialy-admin/.env
            sudo chmod 640 /var/www/axialy-admin/.env
            sudo chown -R www-data:www-data /var/www/axialy-admin

            # Nginx virtual host
            cat <<'NGINX' | sudo tee /etc/nginx/sites-available/axialy-admin > /dev/null
            server {
              listen 80 default_server;
              listen [::]:80 default_server;

              root /var/www/axialy-admin;
              index index.php index.html;

              location / {
                try_files \$uri \$uri/ /index.php?\$args;
              }

              location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
              }

              location ~ /\. {
                deny all;
              }

              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
            }

      # 7) Friendly summary
      - name: Done
        run: |
          echo ""
          echo "========================================"
          echo "Axialy Admin deployed!"
          echo "Public IP : $INSTANCE_IP"
          echo "========================================"
