name: Deploy Axialy UI (DigitalOcean + Terraform)

on:
  push:
    branches: [ main ]
  workflow_dispatch:   # allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-24.04
    defaults:
      run:
        shell: bash

    env:
      # you may tweak these once and forget about them
      DROPLET_NAME: axialy-ui-prod
      DROPLET_REGION: sfo3
      DROPLET_SIZE: s-1vcpu-2gb
      COMPONENT_TAG: ui

    steps:
    # ──────────────────────────────────────────────────────────────
    # 1)  Source & tooling
    # ──────────────────────────────────────────────────────────────
    - name: Check out only what we need
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          axialy-ui-product
          infra/droplet
        sparse-checkout-cone-mode: true

    - name: Set up Terraform 1.6
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false
        cli_config_credentials_hostname: app.terraform.io

    # ──────────────────────────────────────────────────────────────
    # 2)  Provision / update the droplet
    # ──────────────────────────────────────────────────────────────
    - name: terraform init
      working-directory: infra/droplet
      env:
        TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      run: terraform init -input=false

    - name: terraform apply
      id: tfapply
      working-directory: infra/droplet
      env:
        TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      run: |
        terraform apply -auto-approve -input=false \
          -var="droplet_name=${{ env.DROPLET_NAME }}" \
          -var="region=${{ env.DROPLET_REGION }}" \
          -var="droplet_size=${{ env.DROPLET_SIZE }}" \
          -var="ssh_key_fingerprint=${{ secrets.SSH_KEY_FP }}" \
          -var="db_host=${{ secrets.UI_DB_HOST }}" \
          -var="db_port=${{ secrets.UI_DB_PORT }}" \
          -var="db_user=${{ secrets.UI_DB_USER }}" \
          -var="db_password=${{ secrets.UI_DB_PASSWORD }}" \
          -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
          -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
          -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
          -var="component_tag=${{ env.COMPONENT_TAG }}"

        echo "droplet_ip=$(terraform output -raw droplet_ip)"   >> "$GITHUB_OUTPUT"
        echo "droplet_id=$(terraform output -raw droplet_id)"   >> "$GITHUB_OUTPUT"

    - name: Wait for droplet networking
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
      run: |
        echo "Waiting for $IP to accept SSH…"
        for i in {1..30}; do
          if nc -z "$IP" 22 2>/dev/null; then break; fi
          sleep 5
        done

    # ──────────────────────────────────────────────────────────────
    # 3)  Build one-shot helper scripts & keys on the runner
    # ──────────────────────────────────────────────────────────────
    - name: Prepare SSH helpers
      env:
        SSH_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        IP:       ${{ steps.tfapply.outputs.droplet_ip }}
      run: |
        set -e
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        printf '%s\n' "$SSH_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null || true

        # expect wrappers so we can pass the key pass-phrase
        sudo apt-get update -qq
        sudo apt-get install -y expect tar > /dev/null

        cat > ssh_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 300
        set ssh_key  [lindex $argv 0]
        set host     [lindex $argv 1]
        set passph   [lindex $argv 2]
        set cmd      [lindex $argv 3]
        spawn ssh -i $ssh_key -o StrictHostKeyChecking=no root@$host $cmd
        expect {
          "Enter passphrase for key*" { send "$passph\r"; exp_continue }
          eof
        }
        EOF
        chmod +x ssh_with_pass.exp

        cat > scp_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 300
        set ssh_key  [lindex $argv 0]
        set src      [lindex $argv 1]
        set dst      [lindex $argv 2]
        set passph   [lindex $argv 3]
        spawn scp -i $ssh_key -o StrictHostKeyChecking=no $src $dst
        expect {
          "Enter passphrase for key*" { send "$passph\r"; exp_continue }
          eof
        }
        EOF
        chmod +x scp_with_pass.exp

    # ──────────────────────────────────────────────────────────────
    # 4)  Bootstrap the server (packages, PHP, Nginx)
    # ──────────────────────────────────────────────────────────────
    - name: Upload & run bootstrap script
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
        PASSPH: ${{ secrets.SSH_KEY_PASSPHRASE }}
      run: |
        cat > deploy.sh <<'BOOT'
        #!/usr/bin/env bash
        set -e

        wait_for_apt () {
          while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
             || fuser /var/lib/dpkg/lock >/dev/null 2>&1 \
             || fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for other apt/dpkg processes…"
            sleep 5
          done
        }

        echo "🛠  Installing Nginx + PHP 8.1 …"
        wait_for_apt
        apt-get update -qq
        wait_for_apt
        apt-get install -y nginx php8.1-fpm php8.1-mysql \
                           php8.1-mbstring php8.1-xml php8.1-curl \
                           php8.1-zip php8.1-gd > /dev/null

        # One-shot Nginx vhost
        cat > /etc/nginx/sites-available/axialy-ui <<'NGINX'
        server {
          listen 80 default_server;
          listen [::]:80 default_server;

          root /var/www/axialy-ui/public;
          index index.php index.html;
          server_name _;

          location / {
            try_files $uri $uri/ /index.php?$query_string;
          }

          location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
          }

          location ~ /\. {
            deny all;
          }

          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-XSS-Protection "1; mode=block" always;
        }
NGINX
        ln -sf /etc/nginx/sites-available/axialy-ui /etc/nginx/sites-enabled/
        rm -f  /etc/nginx/sites-enabled/default
        nginx -t
        systemctl restart php8.1-fpm nginx
        BOOT

        # Transfer & execute
        ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh root@$IP:/tmp/deploy.sh "$PASSPH"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $IP "$PASSPH" "chmod +x /tmp/deploy.sh && bash /tmp/deploy.sh"
        rm -f deploy.sh

    # ──────────────────────────────────────────────────────────────
    # 5)  Package code, upload, install Composer deps, write .env
    # ──────────────────────────────────────────────────────────────
    - name: Sync application code
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
        PASSPH: ${{ secrets.SSH_KEY_PASSPHRASE }}
      run: |
        set -e
        echo "📦  Packing application…"
        tar -czf /tmp/axialy-ui.tar.gz -C axialy-ui-product .

        echo "🚚  Uploading…"
        ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-ui.tar.gz root@$IP:/tmp/ "$PASSPH"

        echo "🗜  Deploying on the droplet…"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $IP "$PASSPH" "
          set -e
          mkdir -p /var/www/axialy-ui
          tar -xzf /tmp/axialy-ui.tar.gz -C /var/www/axialy-ui

          # Composer (install if missing)
          if ! command -v composer >/dev/null; then
            apt-get update -qq && apt-get install -y composer unzip
          fi
          cd /var/www/axialy-ui
          sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction

          chown -R www-data:www-data /var/www/axialy-ui
          find /var/www/axialy-ui -type d -exec chmod 755 {} \;
          find /var/www/axialy-ui -type f -exec chmod 644 {} \;
        "

    - name: Write .env
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
        PASSPH: ${{ secrets.SSH_KEY_PASSPHRASE }}
      run: |
        cat > env_file <<EOF
APP_ENV=production
APP_DEBUG=false
APP_URL=${{ secrets.APP_BASE_URL }}

# Laravel will generate one if blank; leave empty here
APP_KEY=

DB_CONNECTION=mysql
DB_HOST=${{ secrets.UI_DB_HOST }}
DB_PORT=${{ secrets.UI_DB_PORT }}
DB_DATABASE=axialy_ui
DB_USERNAME=${{ secrets.UI_DB_USER }}
DB_PASSWORD=${{ secrets.UI_DB_PASSWORD }}

STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
EOF

        ./scp_with_pass.exp ~/.ssh/deploy_key env_file root@$IP:/var/www/axialy-ui/.env "$PASSPH"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $IP "$PASSPH" \
          "chmod 640 /var/www/axialy-ui/.env && chown www-data:www-data /var/www/axialy-ui/.env"
        rm -f env_file

    # ──────────────────────────────────────────────────────────────
    # 6)  Post-deploy: optimise + migrations + restart
    # ──────────────────────────────────────────────────────────────
    - name: Optimise & restart services
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
        PASSPH: ${{ secrets.SSH_KEY_PASSPHRASE }}
      run: |
        ./ssh_with_pass.exp ~/.ssh/deploy_key $IP "$PASSPH" "
          cd /var/www/axialy-ui
          sudo -u www-data php artisan config:cache
          sudo -u www-data php artisan route:cache
          sudo -u www-data php artisan view:cache
          # Uncomment if you want migrations on every deploy
          # sudo -u www-data php artisan migrate --force
          systemctl restart php8.1-fpm nginx
        "

    # ──────────────────────────────────────────────────────────────
    # 7)  Smoke test
    # ──────────────────────────────────────────────────────────────
    - name: Verify HTTP response
      env:
        IP: ${{ steps.tfapply.outputs.droplet_ip }}
      run: |
        CODE=$(curl -s -o /dev/null -w '%{http_code}' http://$IP/ || echo "000")
        if [[ "$CODE" == "200" || "$CODE" == "302" ]]; then
          echo "✅ Deployment successful — HTTP $CODE"
        else
          echo "❌ Unexpected HTTP response $CODE"
          exit 1
        fi
