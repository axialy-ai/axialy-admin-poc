name: Axialy UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "Droplet hostname"
        required: true
        default: "axialy-ui-prod"
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Droplet size"
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # ──────────────────────────────────────────────────────────────
    # 1) Checkout only what the UI needs
    # ──────────────────────────────────────────────────────────────
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          axialy-ui-product
          infra/droplet

    # ──────────────────────────────────────────────────────────────
    # 2) Provision / refresh droplet with Terraform
    # ──────────────────────────────────────────────────────────────
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform init
      working-directory: infra/droplet
      run: terraform init -input=false
      env:
        TF_VAR_do_token: ${{ secrets.DO_PAT }}

    - name: Terraform apply
      id: tfout
      working-directory: infra/droplet
      env:
        TF_VAR_do_token: ${{ secrets.DO_PAT }}
      run: |
        terraform apply -auto-approve -input=false \
          -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
          -var="region=${{ github.event.inputs.region }}" \
          -var="droplet_size=${{ github.event.inputs.size }}" \
          -var="ssh_key_fingerprint=${{ secrets.DO_SSH_KEY_FINGERPRINT }}" \
          -var="db_host=${{ secrets.DB_HOST }}" \
          -var="db_port=${{ secrets.DB_PORT }}" \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
          -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
          -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
          -var="component_tag=ui"

        echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
        echo "droplet_id=$(terraform output -raw droplet_id)"  >> "$GITHUB_OUTPUT"

    # ──────────────────────────────────────────────────────────────
    # 3) Brief pause so cloud-init finishes
    # ──────────────────────────────────────────────────────────────
    - name: Wait for droplet to be ready
      run: |
        echo "Waiting for droplet to become reachable..."
        sleep 60

    # ──────────────────────────────────────────────────────────────
    # 4) Configure SSH helpers + push application
    # ──────────────────────────────────────────────────────────────
    - name: Configure SSH and deploy Axialy UI
      env:
        DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        set -e
        #################################################################
        # A.  SSH helpers (identical pattern used by Admin workflow)
        #################################################################
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true

        sudo apt-get update -qq
        sudo apt-get install -y expect tar

        cat > ssh_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 300
        set ssh_key  [lindex $argv 0]
        set host     [lindex $argv 1]
        set passph   [lindex $argv 2]
        set cmd      [lindex $argv 3]
        spawn ssh -i $ssh_key -o StrictHostKeyChecking=no root@$host $cmd
        expect {
          "Enter passphrase for key*" { send "$passph\r"; exp_continue }
          eof
        }
        EOF
        chmod +x ssh_with_pass.exp

        cat > scp_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 300
        set ssh_key  [lindex $argv 0]
        set source   [lindex $argv 1]
        set dest     [lindex $argv 2]
        set passph   [lindex $argv 3]
        spawn scp -i $ssh_key -o StrictHostKeyChecking=no $source $dest
        expect {
          "Enter passphrase for key*" { send "$passph\r"; exp_continue }
          eof
        }
        EOF
        chmod +x scp_with_pass.exp

        #################################################################
        # B.  Remote bootstrap (installs Nginx + PHP stack)
        #################################################################
        cat > deploy.sh <<'REMOTE'
        #!/usr/bin/env bash
        set -e

        # Wait until all apt/dpkg locks are released
        while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
           || fuser /var/lib/dpkg/lock >/dev/null 2>&1 \
           || fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
          echo "Waiting for apt/dpkg locks…"
          sleep 5
        done

        apt-get update -qq
        apt-get install -y nginx php8.1-fpm php8.1-mysql \
                           php8.1-mbstring php8.1-xml php8.1-curl \
                           php8.1-zip php8.1-gd

        # Harden PHP
        sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
        systemctl restart php8.1-fpm

        # Nginx vhost for UI
        cat > /etc/nginx/sites-available/axialy-ui <<'NGINX'
        server {
          listen 80 default_server;
          listen [::]:80 default_server;

          root /var/www/axialy-ui;
          index index.php index.html;
          server_name _;

          location / {
            try_files $uri $uri/ /index.php?$query_string;
          }

          location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
          }

          location ~ /\. {
            deny all;
          }

          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-XSS-Protection "1; mode=block" always;
        }
        NGINX

        ln -sf /etc/nginx/sites-available/axialy-ui /etc/nginx/sites-enabled/
        rm -f /etc/nginx/sites-enabled/default
        nginx -t
        systemctl restart nginx
        REMOTE

        ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh root@$DROPLET_IP:/tmp/deploy.sh "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"

        #################################################################
        # C.  Package & upload application sources
        #################################################################
        tar -czf /tmp/axialy-ui.tar.gz axialy-ui-product
        ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-ui.tar.gz root@$DROPLET_IP:/tmp/ "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" \
          "mkdir -p /var/www/axialy-ui && \
           tar -xzf /tmp/axialy-ui.tar.gz -C /var/www/axialy-ui && \
           chown -R www-data:www-data /var/www/axialy-ui && \
           find /var/www/axialy-ui -type d -exec chmod 755 {} \; && \
           find /var/www/axialy-ui -type f -exec chmod 644 {} \;"

        #################################################################
        # D.  Runtime environment (.env)
        #################################################################
        cat > env_file <<'ENV'
        # UI database
        UI_DB_HOST=${{ secrets.DB_HOST }}
        UI_DB_PORT=${{ secrets.DB_PORT }}
        UI_DB_NAME=axialy_ui
        UI_DB_USER=${{ secrets.DB_USER }}
        UI_DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        # Shared services
        API_BASE_URL=${{ secrets.API_BASE_URL }}
        APP_BASE_URL=${{ secrets.APP_BASE_URL }}
        INTERNAL_API_KEY=${{ secrets.INTERNAL_API_KEY }}

        # Stripe
        STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
        STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
        STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
        ENV
        ./scp_with_pass.exp ~/.ssh/deploy_key env_file root@$DROPLET_IP:/var/www/axialy-ui/.env "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" \
          "chmod 640 /var/www/axialy-ui/.env && chown www-data:www-data /var/www/axialy-ui/.env"

        #################################################################
        # E.  Restart services
        #################################################################
        ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" \
          "systemctl restart php8.1-fpm nginx"

        # Local cleanup
        rm -f deploy.sh env_file /tmp/axialy-ui.tar.gz ssh_with_pass.exp scp_with_pass.exp

    # ──────────────────────────────────────────────────────────────
    # 5) Smoke test
    # ──────────────────────────────────────────────────────────────
    - name: Verify deployment
      env:
        IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        echo "Testing http://$IP/login.php"
        CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$IP/login.php || echo "000")
        if [ "$CODE" = "200" ]; then
          echo "✅ UI is responding (HTTP 200)."
        else
          echo "❌ UI not ready (HTTP $CODE)."; exit 1;
        fi

    # ──────────────────────────────────────────────────────────────
    # 6) Friendly summary
    # ──────────────────────────────────────────────────────────────
    - name: Display deployment info
      env:
        IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        echo "========================================"
        echo "Axialy UI deployed successfully!"
        echo "========================================"
        echo "Visit  ➜  http://$IP/"
        echo "Droplet: ${{ github.event.inputs.droplet_name }}"
        echo "Region : ${{ github.event.inputs.region }}"
        echo "Size   : ${{ github.event.inputs.size }}"
        echo "========================================"
