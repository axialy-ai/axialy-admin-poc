name: Axialy UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: Droplet hostname
        required: true
        default: axialy-ui-prod
      region:
        description: DigitalOcean region
        required: true
        default: sfo3
      size:
        description: Droplet size
        required: true
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            axialy-ui-product
            infra/droplet

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false
          cli_config_credentials_hostname: app.terraform.io

      - name: Terraform init
        working-directory: infra/droplet
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: terraform init -input=false

      - name: Terraform apply
        id: apply
        working-directory: infra/droplet
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
        run: |
          terraform apply -auto-approve -input=false \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="droplet_name=${{ inputs.droplet_name }}" \
            -var="region=${{ inputs.region }}" \
            -var="droplet_size=${{ inputs.size }}" \
            -var="ssh_key_fingerprint=${{ secrets.DO_SSH_KEY_FINGERPRINT }}" \
            -var="db_host=${{ secrets.UI_DB_HOST }}" \
            -var="db_port=${{ secrets.UI_DB_PORT }}" \
            -var="db_user=${{ secrets.UI_DB_USER }}" \
            -var="db_password=${{ secrets.UI_DB_PASSWORD }}" \
            -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
            -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
            -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
            -var="component_tag=ui" \
            -var="smtp_host=${{ secrets.SMTP_HOST }}" \
            -var="smtp_port=${{ secrets.SMTP_PORT }}" \
            -var="smtp_user=${{ secrets.SMTP_USER }}" \
            -var="smtp_password=${{ secrets.SMTP_PASSWORD }}"
          echo "droplet_ip=$(terraform output -raw droplet_ip)" >> "$GITHUB_OUTPUT"
          echo "droplet_id=$(terraform output -raw droplet_id)" >> "$GITHUB_OUTPUT"

      - name: Wait for droplet
        env:
          DROPLET_IP: ${{ steps.apply.outputs.droplet_ip }}
        run: |
          echo "Waiting for droplet to be ready..."
          sleep 60

      - name: Provision droplet and deploy application
        env:
          DROPLET_IP: ${{ steps.apply.outputs.droplet_ip }}
        run: |
          set -e
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true

          sudo apt-get update -qq
          sudo apt-get install -y expect tar

          cat > ssh_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key  [lindex $argv 0]
          set host     [lindex $argv 1]
          set passph   [lindex $argv 2]
          set cmd      [lindex $argv 3]
          spawn ssh -i $ssh_key -o StrictHostKeyChecking=no root@$host $cmd
          expect {
            "Enter passphrase for key*" { send "$passph\r"; exp_continue }
            eof
          }
          EOF
          chmod +x ssh_with_pass.exp

          cat > scp_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key  [lindex $argv 0]
          set src      [lindex $argv 1]
          set dst      [lindex $argv 2]
          set passph   [lindex $argv 3]
          spawn scp -i $ssh_key -o StrictHostKeyChecking=no $src $dst
          expect {
            "Enter passphrase for key*" { send "$passph\r"; exp_continue }
            eof
          }
          EOF
          chmod +x scp_with_pass.exp

          cat > deploy.sh <<'BOOT'
          #!/usr/bin/env bash
          set -euo pipefail

          wait_for_apt() {
            while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
               || fuser /var/lib/dpkg/lock >/dev/null 2>&1 \
               || fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do
              echo "Waiting for other apt/dpkg processes..."
              sleep 5
            done
          }

          wait_for_apt
          apt-get update -qq
          wait_for_apt
          DEBIAN_FRONTEND=noninteractive apt-get install -y \
            nginx php8.1-fpm php8.1-mysql php8.1-mbstring php8.1-xml \
            php8.1-curl php8.1-zip php8.1-gd php8.1-intl composer

          sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
          systemctl restart php8.1-fpm

          cat > /etc/nginx/sites-available/axialy-ui <<'NGINX'
          server {
            listen 80 default_server;
            listen [::]:80 default_server;

            root /var/www/axialy-ui;
            index index.php index.html;
            server_name _;

            location / {
              try_files $uri $uri/ /index.php?$query_string;
            }

            location ~ \.php$ {
              include snippets/fastcgi-php.conf;
              fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
            }

            location ~ /\. { deny all; }

            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff"   always;
            add_header X-XSS-Protection      "1; mode=block" always;
          }
          NGINX

          ln -sf /etc/nginx/sites-available/axialy-ui /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t
          systemctl restart nginx
          BOOT

          ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh root@$DROPLET_IP:/tmp/deploy.sh "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "chmod +x /tmp/deploy.sh && bash /tmp/deploy.sh"

          tar -czf /tmp/axialy-ui.tar.gz -C axialy-ui-product .
          ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-ui.tar.gz root@$DROPLET_IP:/tmp/ "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "mkdir -p /var/www/axialy-ui && tar -xzf /tmp/axialy-ui.tar.gz -C /var/www/axialy-ui && chown -R www-data:www-data /var/www/axialy-ui && find /var/www/axialy-ui -type d -exec chmod 755 {} \; && find /var/www/axialy-ui -type f -exec chmod 644 {} \;"

          cat > env_file <<'ENV'
          UI_DB_HOST=${{ secrets.UI_DB_HOST }}
          UI_DB_PORT=${{ secrets.UI_DB_PORT }}
          UI_DB_NAME=axialy_ui
          UI_DB_USER=${{ secrets.UI_DB_USER }}
          UI_DB_PASSWORD=${{ secrets.UI_DB_PASSWORD }}
          API_BASE_URL=
          APP_BASE_URL=
          INTERNAL_API_KEY=
          SMTP_HOST=${{ secrets.SMTP_HOST }}
          SMTP_PORT=${{ secrets.SMTP_PORT }}
          SMTP_USER=${{ secrets.SMTP_USER }}
          SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}
          SMTP_SECURE=tls
          STRIPE_API_KEY=
          STRIPE_PUBLISHABLE_KEY=
          STRIPE_WEBHOOK_SECRET=
          ENV
          ./scp_with_pass.exp ~/.ssh/deploy_key env_file root@$DROPLET_IP:/var/www/axialy-ui/.env "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "chmod 640 /var/www/axialy-ui/.env && chown www-data:www-data /var/www/axialy-ui/.env"

          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "mkdir -p /var/www/.cache /var/www/.cache/composer /var/www/.config/composer && chown -R www-data:www-data /var/www/.cache /var/www/.config && sudo -u www-data composer config --global cache-dir /var/www/.cache/composer && cd /var/www/axialy-ui && sudo -u www-data composer install --no-dev --optimize-autoloader --no-interaction && chown -R www-data:www-data /var/www/axialy-ui/vendor"

          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "systemctl restart php8.1-fpm nginx"

          rm -f deploy.sh env_file /tmp/axialy-ui.tar.gz ssh_with_pass.exp scp_with_pass.exp

      - name: Test deployment
        env:
          DROPLET_IP: ${{ steps.apply.outputs.droplet_ip }}
        run: |
          echo "Testing deployment..."
          CODE=$(curl -s -o /dev/null -w '%{http_code}' http://$DROPLET_IP/ || echo "000")
          if [ "$CODE" = "200" ] || [ "$CODE" = "302" ]; then
            echo "Deployment successful. HTTP $CODE"
          else
            echo "Unexpected HTTP response $CODE"
            exit 1
          fi

      - name: Summary
        env:
          DROPLET_IP: ${{ steps.apply.outputs.droplet_ip }}
        run: |
          echo "========================================"
          echo "Axialy UI deployed successfully!"
          echo "========================================"
          echo "Access your application at:"
          echo "  http://$DROPLET_IP/"
          echo ""
          echo "Droplet Details:"
          echo "  Name   : ${{ inputs.droplet_name }}"
          echo "  IP     : $DROPLET_IP"
          echo "  Region : ${{ inputs.region }}"
          echo "  Size   : ${{ inputs.size }}"
          echo "========================================"
