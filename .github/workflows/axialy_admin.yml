name: Axialy Admin UI

on:
  workflow_dispatch: {}

env:
  # DigitalOcean
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  # database secrets written by the “Axialy DB” workflow
  DB_HOST:      ${{ secrets.DB_HOST }}
  DB_PORT:      ${{ secrets.DB_PORT }}
  DB_USER:      ${{ secrets.DB_USER }}
  DB_PASSWORD:  ${{ secrets.DB_PASSWORD }}
  # Axialy Admin default credentials
  ADMIN_DEFAULT_USER:     ${{ secrets.ADMIN_DEFAULT_USER }}
  ADMIN_DEFAULT_EMAIL:    ${{ secrets.ADMIN_DEFAULT_EMAIL }}
  ADMIN_DEFAULT_PASSWORD: ${{ secrets.ADMIN_DEFAULT_PASSWORD }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: ⬇️ Checkout sources (app + Terraform)
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            axialy-admin-product
            infra/droplet

      - name: ⚙️ Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false
          cli_config_credentials_hostname: app.terraform.io

      # —————————————————————————————————————————————
      # Terraform APPLY – droplet + firewall
      # —————————————————————————————————————————————
      - name: 🚀 Provision DigitalOcean droplet
        id: tf_apply
        working-directory: infra/droplet
        run: |
          terraform init -input=false
          terraform apply -auto-approve -input=false  \
             -var="droplet_name=axialy-admin-prod"    \
             -var="region=sfo3"                       \
             -var="droplet_size=s-1vcpu-2gb"          \
             -var="ssh_key_fingerprint=${{ secrets.DO_SSH_FP }}" \
             -var="db_host=${DB_HOST}"                \
             -var="db_port=${DB_PORT}"                \
             -var="db_user=${DB_USER}"                \
             -var="db_password=${DB_PASSWORD}"        \
             -var="admin_default_user=${ADMIN_DEFAULT_USER}" \
             -var="admin_default_email=${ADMIN_DEFAULT_EMAIL}" \
             -var="admin_default_password=${ADMIN_DEFAULT_PASSWORD}" \
             -var="component_tag=admin"

          echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
          echo "droplet_id=$(terraform output -raw droplet_id)"  >> "$GITHUB_OUTPUT"

      # —————————————————————————————————————————————
      # Bootstrap the VM
      # —————————————————————————————————————————————
      - name: 💤 Pause until SSH is reachable
        run: |
          echo "Waiting for droplet to be ready..."
          sleep 60    # tiny droplet → ~50 s to finish cloud-init

      - name: 🔑 Prepare SSH key & helpers
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600  ~/.ssh/deploy_key
          ssh-keyscan -H "${{ steps.tf_apply.outputs.droplet_ip }}" >> ~/.ssh/known_hosts 2>/dev/null || true

          sudo apt-get update -qq
          sudo apt-get install -y expect

          ## little helpers to tunnel/pass the key-phrase
          cat > ssh_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key  [lindex $argv 0]
          set host     [lindex $argv 1]
          set passph   [lindex $argv 2]
          set cmd      [lindex $argv 3]
          spawn ssh -i $ssh_key -o StrictHostKeyChecking=no root@$host $cmd
          expect {
            "Enter passphrase for key*" { send "$passph\r"; exp_continue }
            eof
          }
          EOF
          chmod +x ssh_with_pass.exp

          cat > scp_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key  [lindex $argv 0]
          set src      [lindex $argv 1]
          set dst      [lindex $argv 2]
          set passph   [lindex $argv 3]
          spawn scp -i $ssh_key -o StrictHostKeyChecking=no $src $dst
          expect {
            "Enter passphrase for key*" { send "$passph\r"; exp_continue }
            eof
          }
          EOF
          chmod +x scp_with_pass.exp

      - name: 📦 Build & ship the bootstrap script
        env:
          DROPLET_IP: ${{ steps.tf_apply.outputs.droplet_ip }}
        run: |
          # ------------------------------------------------------------------
          #  THIS is the only substantive change: a tougher “wait-for-apt”
          # ------------------------------------------------------------------
          cat > deploy.sh <<'DEPLOY'
          #!/usr/bin/env bash
          set -euo pipefail
          echo "🔧  Setting up Axialy Admin…"

          # ==== block until unattended-apt / apt-daily exits ================
          echo "⏳  Waiting for other apt/dpkg processes to finish…"
          while \
            fuser /var/lib/dpkg/lock-frontend   >/dev/null 2>&1 || \
            fuser /var/lib/apt/lists/lock       >/dev/null 2>&1 || \
            pgrep -xf "apt(.daily|\.shim|-get|)" >/dev/null 2>&1 ; do
            sleep 5
          done
          echo "✅  Apt locks cleared."

          # (optional but speeds things up)
          systemctl disable --now apt-daily.service apt-daily.timer \
                                   apt-daily-upgrade.service apt-daily-upgrade.timer \
                                   unattended-upgrades.service 2>/dev/null || true

          # ==== web stack ====================================================
          apt-get update -qq
          DEBIAN_FRONTEND=noninteractive \
            apt-get install -y nginx php8.1-fpm php8.1-mysql \
                                 php8.1-mbstring php8.1-xml php8.1-curl \
                                 php8.1-zip php8.1-gd

          sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
          systemctl enable --now php8.1-fpm

          # ==== NGINX vhost ==================================================
          cat > /etc/nginx/sites-available/axialy-admin <<'NGINX'
          server {
            listen 80 default_server;
            listen [::]:80 default_server;
            root /var/www/axialy-admin;
            index index.php index.html;
            server_name _;
            location / {
              try_files $uri $uri/ /index.php?$query_string;
            }
            location ~ \.php$ {
              include snippets/fastcgi-php.conf;
              fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
            }
            location ~ /\. { deny all; }
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-Content-Type-Options "nosniff"  always;
            add_header X-XSS-Protection      "1; mode=block" always;
          }
          NGINX
          ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t
          systemctl enable --now nginx

          echo "🎉  Web stack installed."
          DEPLOY

          ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh         root@$DROPLET_IP:/tmp/deploy.sh     "" >/dev/null
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "" "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"

      - name: 🚚 Copy application code + .env
        env:
          DROPLET_IP: ${{ steps.tf_apply.outputs.droplet_ip }}
        run: |
          # tar app
          tar -czf axialy-admin.tar.gz -C axialy-admin-product .
          ./scp_with_pass.exp ~/.ssh/deploy_key axialy-admin.tar.gz root@$DROPLET_IP:/tmp/ "" >/dev/null

          # explode on server
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "" \
            "mkdir -p /var/www/axialy-admin && \
             tar -xzf /tmp/axialy-admin.tar.gz -C /var/www/axialy-admin && \
             mv /var/www/axialy-admin/admin_login.http.php /var/www/axialy-admin/admin_login.php && \
             chown -R www-data:www-data /var/www/axialy-admin && \
             find /var/www/axialy-admin -type d -exec chmod 755 {} \; && \
             find /var/www/axialy-admin -type f -exec chmod 644 {} \;"

          # generate .env locally → copy
          cat > .env <<EOF
          DB_HOST=${DB_HOST}
          DB_PORT=${DB_PORT}
          DB_NAME=axialy_admin
          DB_USER=${DB_USER}
          DB_PASSWORD=${DB_PASSWORD}

          UI_DB_HOST=${DB_HOST}
          UI_DB_PORT=${DB_PORT}
          UI_DB_NAME=axialy_ui
          UI_DB_USER=${DB_USER}
          UI_DB_PASSWORD=${DB_PASSWORD}

          ADMIN_DEFAULT_USER=${ADMIN_DEFAULT_USER}
          ADMIN_DEFAULT_EMAIL=${ADMIN_DEFAULT_EMAIL}
          ADMIN_DEFAULT_PASSWORD=${ADMIN_DEFAULT_PASSWORD}
          EOF
          ./scp_with_pass.exp ~/.ssh/deploy_key .env root@$DROPLET_IP:/var/www/axialy-admin/.env "" >/dev/null
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "" \
            "chmod 640 /var/www/axialy-admin/.env && chown www-data:www-data /var/www/axialy-admin/.env"

      - name: ✅ Smoke-test
        env:
          APP_URL:  http://${{ steps.tf_apply.outputs.droplet_ip }}/admin_login.php
        run: |
          echo "Testing ${APP_URL} …"
          for i in {1..12}; do  # give PHP/NGINX up to 60 s to warm up
            code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 10 "$APP_URL" || echo "000")
            [[ "$code" == "200" ]] && { echo "💚 Up!"; exit 0; }
            sleep 5
          done
          echo "::warning file=bootstrap::Application did not answer with 200 OK (last code: $code)"
