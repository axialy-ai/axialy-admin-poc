name: Axialy Admin UI
on:
  workflow_dispatch:        # run by hand
  push:                     # or when source / infra changes
    paths:
      - "axialy-admin-product/**"
      - "infra/droplet/**"
      - ".github/workflows/axialy-admin.yml"

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}

    steps:
    # ───────────────────────────────────────────────
    # 1. Checkout repo (sparse)
    # ───────────────────────────────────────────────
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          axialy-admin-product
          infra/droplet

    # ───────────────────────────────────────────────
    # 2. Terraform - create droplet + firewall
    # ───────────────────────────────────────────────
    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform apply
      id: tf
      working-directory: infra/droplet
      run: |
        terraform init -input=false
        terraform apply -auto-approve -input=false \
          -var="droplet_name=axialy-admin-prod" \
          -var="region=sfo3" \
          -var="droplet_size=s-1vcpu-2gb" \
          -var="ssh_key_fingerprint=${{ secrets.SSH_FINGERPRINT }}" \
          -var="db_host=${{ secrets.DB_HOST }}" \
          -var="db_port=${{ secrets.DB_PORT }}" \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
          -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
          -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
          -var="component_tag=admin"

        echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
        echo "droplet_id=$(terraform output -raw droplet_id)"  >> "$GITHUB_OUTPUT"

    # ───────────────────────────────────────────────
    # 3. Wait for SSH to come up
    # ───────────────────────────────────────────────
    - name: Wait for SSH
      run: |
        IP="${{ steps.tf.outputs.droplet_ip }}"
        echo "Waiting for $IP:22 ..."
        for i in {1..30}; do
          nc -z -w5 "$IP" 22 && exit 0
          sleep 5
        done
        echo "::error::SSH never became reachable" && exit 1

    # ───────────────────────────────────────────────
    # 4. Upload & run hardened deploy script
    # ───────────────────────────────────────────────
    - name: Deploy application
      env:
        IP: ${{ steps.tf.outputs.droplet_ip }}
        SSH_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # prepare local SSH key
        install -m 700 -d ~/.ssh
        printf '%s\n' "$SSH_KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H "$IP" >> ~/.ssh/known_hosts 2>/dev/null

        # tiny helper to run commands via key *with* pass-phrase
        cat > ssh.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 300
        set key   [lindex $argv 0]
        set host  [lindex $argv 1]
        set pass  [lindex $argv 2]
        set cmd   [lindex $argv 3]
        spawn ssh -i $key -o StrictHostKeyChecking=no root@$host $cmd
        expect {
          "Enter passphrase for key*" { send "$pass\r"; exp_continue }
          eof
        }
        EOF
        chmod +x ssh.exp

        # ---------------- deploy.sh sent to droplet ----------------
        cat > deploy.sh <<'DEPLOY'
        #!/usr/bin/env bash
        set -euo pipefail
        echo "[+] Boot-strapping Axialy Admin on $(hostname)..."

        # ---- wait for *all* apt / dpkg locks (lists, frontend & legacy) ----
        while lsof /var/lib/dpkg/lock-frontend            >/dev/null 2>&1 \
           || lsof /var/lib/dpkg/lock                     >/dev/null 2>&1 \
           || lsof /var/lib/apt/lists/lock                >/dev/null 2>&1 ; do
          echo "    apt is busy – waiting ..."
          sleep 5
        done

        # ---- retry package install up to 5x in case apt-daily kicks in ----
        attempt=0
        until DEBIAN_FRONTEND=noninteractive \
           apt-get update -qq && \
           DEBIAN_FRONTEND=noninteractive \
           apt-get install -y nginx php8.1-fpm php8.1-mysql \
                              php8.1-mbstring php8.1-xml php8.1-curl \
                              php8.1-zip php8.1-gd ; do
          attempt=$(( attempt + 1 ))
          if [ "$attempt" -ge 5 ]; then
            echo "FATAL: apt keep failing after $attempt attempts"; exit 1
          fi
          echo "    apt failed (attempt $attempt) – retrying in 10s ..."
          sleep 10
        done

        # ---- configure PHP & Nginx ----
        sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
        systemctl enable --now php8.1-fpm nginx

        cat >/etc/nginx/sites-available/axialy-admin <<'NGINX'
        server {
          listen 80 default_server;
          listen [::]:80 default_server;
          root /var/www/axialy-admin;
          index index.php index.html;
          server_name _;
          location / { try_files $uri $uri/ /index.php?$query_string; }
          location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
          }
          location ~ /\. { deny all; }
          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-XSS-Protection "1; mode=block" always;
        }
        NGINX
        ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
        rm -f /etc/nginx/sites-enabled/default
        nginx -t
        systemctl reload nginx

        echo "[✓] Base stack ready"
        DEPLOY
        chmod +x deploy.sh
        # -------------------------------------------------------------------

        # copy artefacts & run the script
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh root@$IP:/root/
        ./ssh.exp ~/.ssh/deploy_key $IP "" "bash /root/deploy.sh"

        echo "[✓] Deployment finished – hit http://$IP/admin_login.php"
