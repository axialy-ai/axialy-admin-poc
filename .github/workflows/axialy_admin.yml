name: Axialy Admin Droplet

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "Droplet hostname"
        required: true
      region:
        description: "DO region"
        default: sfo3
      size:
        description: "Droplet size"
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      # DigitalOcean credentials
      TF_VAR_do_token:        ${{ secrets.DO_PAT }}
      TF_VAR_ssh_key_name:    ${{ secrets.DO_SSH_KEY_NAME }}
      TF_VAR_ssh_public_key:  ${{ secrets.DO_SSH_PUBLIC_KEY }}
      
      # Repo URL for cloud-init
      TF_VAR_repo_url:        ${{ github.server_url }}/${{ github.repository }}.git
      
      # DB credentials (from axialy_db.yml outputs)
      TF_VAR_db_host:         ${{ secrets.DB_HOST }}
      TF_VAR_db_port:         ${{ secrets.DB_PORT }}
      TF_VAR_db_user:         ${{ secrets.DB_USER }}
      TF_VAR_db_pass:         ${{ secrets.DB_PASSWORD }}
      
      # First-use admin login
      TF_VAR_admin_default_user:      ${{ secrets.ADMIN_DEFAULT_USER }}
      TF_VAR_admin_default_email:     ${{ secrets.ADMIN_DEFAULT_EMAIL }}
      TF_VAR_admin_default_password:  ${{ secrets.ADMIN_DEFAULT_PASSWORD }}
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Verify database secrets exist
        run: |
          if [ -z "${{ secrets.DB_HOST }}" ]; then
            echo "::error::DB_HOST secret is not set. Please run the database workflow first."
            exit 1
          fi
          if [ -z "${{ secrets.DB_PASSWORD }}" ]; then
            echo "::error::DB_PASSWORD secret is not set. Please run the database workflow first."
            exit 1
          fi
          echo "âœ“ Database secrets are configured"
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
      
      - name: Terraform init
        working-directory: infra/droplet
        run: terraform init -input=false
      
      - name: Terraform plan
        working-directory: infra/droplet
        run: |
          terraform plan -input=false \
            -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
            -var="region=${{ github.event.inputs.region }}" \
            -var="size=${{ github.event.inputs.size }}"
      
      - name: Terraform apply
        working-directory: infra/droplet
        run: |
          terraform apply -auto-approve -input=false \
            -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
            -var="region=${{ github.event.inputs.region }}" \
            -var="size=${{ github.event.inputs.size }}"
      
      - name: Get Droplet IP
        working-directory: infra/droplet
        id: droplet
        run: |
          DROPLET_IP=$(terraform output -raw droplet_ip)
          echo "ip=$DROPLET_IP" >> $GITHUB_OUTPUT
          echo "Droplet IP: $DROPLET_IP"
      
      - name: Wait for cloud-init to complete
        run: |
          echo "Waiting for cloud-init to complete on the droplet..."
          sleep 30  # Initial wait for SSH to be ready
          
          # Check cloud-init status
          for i in {1..20}; do
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=5 root@${{ steps.droplet.outputs.ip }} "cloud-init status --wait" 2>/dev/null; then
              echo "Cloud-init completed successfully!"
              break
            fi
            echo "Waiting for cloud-init... ($i/20)"
            sleep 15
          done
      
      - name: Show deployment info
        run: |
          echo "========================================"
          echo "Axialy Admin deployed successfully!"
          echo "========================================"
          echo "URL: http://${{ steps.droplet.outputs.ip }}/"
          echo ""
          echo "Initial setup:"
          echo "When prompted, use 'Casellio' as the admin code"
          echo "Then log in with username: caseylide"
          echo "========================================"
