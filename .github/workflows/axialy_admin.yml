name: Axialy Admin UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "Droplet hostname"
        required: true
        default: "axialy-admin-prod"
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Droplet size"
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false
      
      - name: Terraform init
        working-directory: infra/droplet
        run: terraform init -input=false
        env:
          TF_VAR_do_token: ${{ secrets.DO_PAT }}
      
      - name: Terraform apply
        id: tfout
        working-directory: infra/droplet
        run: |
          terraform apply -auto-approve -input=false \
            -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
            -var="region=${{ github.event.inputs.region }}" \
            -var="droplet_size=${{ github.event.inputs.size }}" \
            -var="ssh_key_fingerprint=${{ secrets.DO_SSH_KEY_FINGERPRINT }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
            -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
            -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}"
          
          # Export outputs to GITHUB_OUTPUT
          echo "droplet_ip=$(terraform output -raw droplet_ip)" >> "$GITHUB_OUTPUT"
          echo "droplet_id=$(terraform output -raw droplet_id)" >> "$GITHUB_OUTPUT"
        env:
          TF_VAR_do_token: ${{ secrets.DO_PAT }}
      
      - name: Wait for droplet to be ready
        run: |
          echo "Waiting for droplet to be ready..."
          # Wait longer for cloud-init to complete
          sleep 60
      
      - name: Configure SSH and Deploy
        env:
          DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }}
        run: |
          # Setup SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Write SSH key
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # Add droplet to known hosts
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true
          
          # Install expect for passphrase handling
          sudo apt-get update && sudo apt-get install -y expect
          
          # Create expect script for SSH with passphrase
          cat > ssh_with_pass.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key [lindex $argv 0]
          set host [lindex $argv 1]
          set passphrase [lindex $argv 2]
          set command [lindex $argv 3]
          
          spawn ssh -i $ssh_key -o StrictHostKeyChecking=no root@$host $command
          expect {
            "Enter passphrase for key*" {
              send "$passphrase\r"
              exp_continue
            }
            eof
          }
          EOF
          chmod +x ssh_with_pass.exp
          
          # Create deployment script
          cat > deploy.sh << 'DEPLOY_SCRIPT'
          #!/bin/bash
          set -e
          
          echo "Setting up Axialy Admin application..."
          
          # Wait for apt to be available
          while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
            echo "Waiting for apt to be available..."
            sleep 5
          done
          
          # Update and install packages
          apt-get update
          apt-get install -y nginx php8.1-fpm php8.1-mysql php8.1-mbstring \
            php8.1-xml php8.1-curl php8.1-zip php8.1-gd
          
          # Configure PHP
          sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
          systemctl restart php8.1-fpm
          
          # Configure Nginx
          cat > /etc/nginx/sites-available/axialy-admin << 'NGINX_CONF'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;
              
              root /var/www/axialy-admin;
              index index.php index.html;
              
              server_name _;
              
              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }
              
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
              }
              
              location ~ /\.ht {
                  deny all;
              }
              
              location ~ /\. {
                  deny all;
              }
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
          }
          NGINX_CONF
          
          # Enable site
          ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
          rm -f /etc/nginx/sites-enabled/default
          nginx -t
          systemctl restart nginx
          
          echo "Setup completed!"
          DEPLOY_SCRIPT
          
          # Copy deployment script to droplet
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "cat > /tmp/deploy.sh" < deploy.sh
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "chmod +x /tmp/deploy.sh"
          
          # Execute deployment script
          echo "Running deployment script on droplet..."
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "bash /tmp/deploy.sh"
          
          # Deploy application files
          echo "Deploying application files..."
          
          # Create tar archive of application
          cd axialy-admin-product
          tar -czf /tmp/axialy-admin.tar.gz .
          cd ..
          
          # Copy application archive to droplet
          cat > scp_with_pass.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set ssh_key [lindex $argv 0]
          set source [lindex $argv 1]
          set dest [lindex $argv 2]
          set passphrase [lindex $argv 3]
          
          spawn scp -i $ssh_key -o StrictHostKeyChecking=no $source $dest
          expect {
            "Enter passphrase for key*" {
              send "$passphrase\r"
              exp_continue
            }
            eof
          }
          EOF
          chmod +x scp_with_pass.exp
          
          ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-admin.tar.gz root@$DROPLET_IP:/tmp/ "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          
          # Extract and set permissions
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "cd /var/www/axialy-admin && tar -xzf /tmp/axialy-admin.tar.gz && chown -R www-data:www-data /var/www/axialy-admin && find /var/www/axialy-admin -type d -exec chmod 755 {} \; && find /var/www/axialy-admin -type f -exec chmod 644 {} \;"
          
          # Create environment file
          cat > env_file << ENV_EOF
          # Axialy Admin Database
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=axialy_admin
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Axialy UI Database
          UI_DB_HOST=${{ secrets.DB_HOST }}
          UI_DB_PORT=${{ secrets.DB_PORT }}
          UI_DB_NAME=axialy_ui
          UI_DB_USER=${{ secrets.DB_USER }}
          UI_DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          
          # Admin defaults
          ADMIN_DEFAULT_USER=${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_EMAIL=${{ secrets.ADMIN_DEFAULT_EMAIL }}
          ADMIN_DEFAULT_PASSWORD=${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          ENV_EOF
          
          # Copy environment file
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "cat > /var/www/axialy-admin/.env" < env_file
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "chmod 640 /var/www/axialy-admin/.env && chown www-data:www-data /var/www/axialy-admin/.env"
          
          # Restart services
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "systemctl restart php8.1-fpm nginx"
          
          # Cleanup
          rm -f deploy.sh ssh_with_pass.exp scp_with_pass.exp env_file /tmp/axialy-admin.tar.gz
      
      - name: Verify deployment
        run: |
          echo "Testing deployment..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.tfout.outputs.droplet_ip }}/admin_login.php || echo "000")
          
          if [ "$RESPONSE" = "200" ]; then
            echo "✅ Deployment successful! Application is responding."
          else
            echo "⚠️  Application may still be initializing. HTTP response code: $RESPONSE"
          fi
      
      - name: Display deployment info
        run: |
          echo "========================================"
          echo "Axialy Admin deployed successfully!"
          echo "========================================"
          echo ""
          echo "Access your application at:"
          echo "http://${{ steps.tfout.outputs.droplet_ip }}/admin_login.php"
          echo ""
          echo "Droplet Details:"
          echo "- Name: ${{ github.event.inputs.droplet_name }}"
          echo "- IP: ${{ steps.tfout.outputs.droplet_ip }}"
          echo "- Region: ${{ github.event.inputs.region }}"
          echo "- Size: ${{ github.event.inputs.size }}"
          echo ""
          echo "Database connection has been configured automatically."
          echo "========================================"
