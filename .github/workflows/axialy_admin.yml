name: Axialy Admin UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "Droplet hostname"
        required: true
        default: "axialy-admin-prod"
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Droplet size"
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        env: { TF_VAR_do_token: ${{ secrets.DO_PAT }} }
        working-directory: infra/droplet
        run: terraform init -input=false

      - name: Terraform apply
        id: tfout
        env: { TF_VAR_do_token: ${{ secrets.DO_PAT }} }
        working-directory: infra/droplet
        run: |
          terraform apply -auto-approve -input=false \
            -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
            -var="region=${{ github.event.inputs.region }}" \
            -var="droplet_size=${{ github.event.inputs.size }}" \
            -var="ssh_key_fingerprint=${{ secrets.DO_SSH_KEY_FINGERPRINT }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
            -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
            -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}"

          echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
          echo "droplet_id=$(terraform output -raw droplet_id)"  >> "$GITHUB_OUTPUT"

      - name: Wait for droplet to be ready
        run: |
          echo "Waiting 60 s for SSH/Cloud-Init…"
          sleep 60

      - name: Configure SSH helpers
        env: { DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }} }
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true

          sudo apt-get update -qq
          sudo apt-get install -y expect

          cat > ssh_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set key  [lindex $argv 0]; set host [lindex $argv 1]
          set pass [lindex $argv 2]; set cmd  [lindex $argv 3]
          spawn ssh -i $key -o StrictHostKeyChecking=no root@$host $cmd
          expect { "Enter passphrase for key*" { send "$pass\r"; exp_continue } eof }
          EOF
          chmod +x ssh_with_pass.exp

          cat > scp_with_pass.exp <<'EOF'
          #!/usr/bin/expect -f
          set timeout 300
          set key  [lindex $argv 0]; set src  [lindex $argv 1]
          set dst  [lindex $argv 2]; set pass [lindex $argv 3]
          spawn scp -i $key -o StrictHostKeyChecking=no $src $dst
          expect { "Enter passphrase for key*" { send "$pass\r"; exp_continue } eof }
          EOF
          chmod +x scp_with_pass.exp

      - name: Run remote deploy script
        env: { DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }} }
        run: |
          cat > deploy.sh <<'DEPLOY'
          #!/usr/bin/env bash
          set -euo pipefail
          echo "▶ bootstrap packages"
          apt-get update -qq
          apt-get install -y nginx php8.1-fpm php8.1-{mysql,mbstring,xml,curl,zip,gd}

          sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini

          # global session-dir permission fix
          chown root:www-data /var/lib/php/sessions
          chmod 1730          /var/lib/php/sessions
          systemctl restart php8.1-fpm

          echo "▶ drop vhost"
          cat > /etc/nginx/sites-available/axialy-admin <<'NGINX'
          server {
              listen 80 default_server;
              listen [::]:80 default_server;

              root /var/www/axialy-admin;
              index index.php index.html;
              server_name _;

              location / {
                  try_files $uri $uri/ /index.php?$query_string;
              }

              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;   # ← only one fastcgi_pass!
              }

              location ~ /\. { deny all; }

              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header X-XSS-Protection "1; mode=block" always;
          }
          NGINX

          ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
          rm -f  /etc/nginx/sites-enabled/default
          nginx -t
          systemctl restart nginx

          echo "▶ prepare web root & permissions"
          mkdir -p /var/www/axialy-admin
          chown -R www-data:www-data /var/www/axialy-admin
          find  /var/www/axialy-admin -type d -exec chmod 755 {} \;

          DEPLOY

          ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh root@$DROPLET_IP:/tmp/deploy.sh "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "bash /tmp/deploy.sh"

      - name: Copy application & env file
        env: { DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }} }
        run: |
          tar -czf /tmp/axialy-admin.tar.gz axialy-admin-product
          ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-admin.tar.gz root@$DROPLET_IP:/tmp/ "${{ secrets.DROPLET_SSH_PASSPHRASE }}"

          ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" \
            "tar -xzf /tmp/axialy-admin.tar.gz -C /var/www/axialy-admin && \
             chown -R www-data:www-data /var/www/axialy-admin"

          cat > env_file <<'ENV'
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=axialy_admin
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          UI_DB_HOST=${{ secrets.DB_HOST }}
          UI_DB_PORT=${{ secrets.DB_PORT }}
          UI_DB_NAME=axialy_ui
          UI_DB_USER=${{ secrets.DB_USER }}
          UI_DB_PASSWORD=${{ secrets.DB_PASSWORD }}

          ADMIN_DEFAULT_USER=${{ secrets.ADMIN_DEFAULT_USER }}
          ADMIN_DEFAULT_EMAIL=${{ secrets.ADMIN_DEFAULT_EMAIL }}
          ADMIN_DEFAULT_PASSWORD=${{ secrets.ADMIN_DEFAULT_PASSWORD }}
          ENV

          ./scp_with_pass.exp ~/.ssh/deploy_key env_file root@$DROPLET_IP:/var/www/axialy-admin/.env "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp  ~/.ssh/deploy_key $DROPLET_IP "${{ secrets.DROPLET_SSH_PASSPHRASE }}" \
            "chmod 640 /var/www/axialy-admin/.env && chown www-data:www-data /var/www/axialy-admin/.env && \
             systemctl restart nginx"

      - name: Smoke-test
        run: |
          ip=${{ steps.tfout.outputs.droplet_ip }}
          for i in {1..10}; do
            code=$(curl -s -o /dev/null -w '%{http_code}' http://$ip/admin_login.php || true)
            [ "$code" = "200" ] && { echo "✅ OK"; exit 0; }
            echo "…still booting ($i) – HTTP $code"; sleep 6
          done
          echo "❌ Site not responding"; exit 1
