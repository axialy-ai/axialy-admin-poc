name: Axialy Admin UI

on:
  workflow_dispatch:
  push:
    paths:
      - "axialy-admin-product/**"
      - "infra/droplet/**"
      - ".github/workflows/axialy-admin.yml"

defaults:
  run:
    shell: bash

jobs:
  deploy:
    runs-on: ubuntu-24.04
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      GH_TOKEN:        ${{ secrets.GH_PAT       }}
    steps:

    # ───────────────────────────────────────── terraform ──
    - uses: actions/checkout@v4
      with:
        sparse-checkout: |
          axialy-admin-product
          infra/droplet

    - uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false
        cli_config_credentials_hostname: app.terraform.io

    - name: “terraform apply → droplet”
      id: tf
      run: |
        cd infra/droplet
        terraform init -input=false
        terraform apply -auto-approve -input=false \
          -var="droplet_name=axialy-admin-prod" \
          -var="region=sfo3" \
          -var="droplet_size=s-1vcpu-2gb" \
          -var="ssh_key_fingerprint=${{ secrets.SSH_FP }}" \
          -var="db_host=${{ secrets.DB_HOST }}" \
          -var="db_port=${{ secrets.DB_PORT }}" \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
          -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
          -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
          -var="component_tag=admin"

        echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
        echo "droplet_id=$(terraform output -raw droplet_id)" >> "$GITHUB_OUTPUT"

    # ───────────────────────────────────────── bootstrap ──
    - name: “wait for SSH to answer”
      run: |
        IP=${{ steps.tf.outputs.droplet_ip }}
        echo "Waiting for $IP:22 ..."
        for i in {1..30}; do
          if nc -z "$IP" 22; then exit 0; fi
          sleep 5
        done
        echo "::error::SSH never became reachable"; exit 1

    - name: “install → upload → configure”
      env:
        DROPLET_IP: ${{ steps.tf.outputs.droplet_ip }}
        KEY:        ${{ secrets.SSH_PRIVATE_KEY }}
        KEY_PASS:   ${{ secrets.SSH_KEY_PASS }}
      run: |
        # ---------- prepare local key ----------
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        printf '%s\n' "$KEY" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H "$DROPLET_IP" >> ~/.ssh/known_hosts 2>/dev/null || true

        # ---------- helper (expect handles pass-phrase) ----------
        cat > ssh.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 600
        set key  [lindex $argv 0];  set host [lindex $argv 1]
        set pass [lindex $argv 2];  set cmd  [lindex $argv 3]
        spawn ssh -o StrictHostKeyChecking=no -i $key root@$host $cmd
        expect {
          "Enter passphrase for key*" { send "$pass\r"; exp_continue }
          eof
        }
        EOF
        chmod +x ssh.exp

        # ---------- remote bootstrap script ----------
        cat > deploy.sh <<'REM'
        #!/usr/bin/env bash
        set -euo pipefail

        echo "::group::system-packages"
        # Wait until ALL apt locks are released (lists & dpkg)
        while lsof /var/lib/dpkg/lock-frontend >/dev/null 2>&1 \
           || lsof /var/lib/apt/lists/lock       >/dev/null 2>&1; do
          echo "∙ apt lock present – sleeping 5s"
          sleep 5
        done

        export DEBIAN_FRONTEND=noninteractive
        apt-get update -qq
        # retry once if the package index was busy
        for n in 1 2; do
          if apt-get install -y nginx php8.1-fpm php8.1-mysql \
                                   php8.1-{mbstring,xml,curl,zip,gd}; then
            break
          elif [ $n -eq 2 ]; then
            echo "apt-get failed twice, giving up"; exit 1
          else
            echo "apt-get failed, retrying in 15s …"; sleep 15
          fi
        done
        echo "::endgroup::"

        echo "::group::nginx-config"
        cat > /etc/nginx/sites-available/axialy-admin <<'CONF'
        server {
          listen 80 default_server;
          listen [::]:80 default_server;
          root /var/www/axialy-admin;
          index index.php index.html;

          location / {
            try_files $uri $uri/ /index.php?$query_string;
          }

          location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
          }

          location ~ /\. { deny all; }

          add_header X-Frame-Options "SAMEORIGIN" always;
          add_header X-Content-Type-Options "nosniff" always;
          add_header X-XSS-Protection "1; mode=block" always;
        }
        CONF
        ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
        rm -f /etc/nginx/sites-enabled/default
        nginx -t
        systemctl enable --now nginx php8.1-fpm
        echo "::endgroup::"
        REM
        chmod +x deploy.sh

        # ---------- copy & run bootstrap ----------
        ./ssh.exp ~/.ssh/deploy_key "$DROPLET_IP" "$KEY_PASS" "mkdir -p /tmp"
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.sh root@"$DROPLET_IP":/tmp/
        ./ssh.exp ~/.ssh/deploy_key "$DROPLET_IP" "$KEY_PASS" "bash /tmp/deploy.sh"

        # ---------- copy application bundle ----------
        tar -C axialy-admin-product -czf /tmp/axialy-admin.tar.gz .
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no /tmp/axialy-admin.tar.gz root@"$DROPLET_IP":/tmp/
        ./ssh.exp ~/.ssh/deploy_key "$DROPLET_IP" "$KEY_PASS" \
          "mkdir -p /var/www/axialy-admin && \
           tar -xzf /tmp/axialy-admin.tar.gz -C /var/www/axialy-admin && \
           mv /var/www/axialy-admin/admin_login.http.php /var/www/axialy-admin/admin_login.php && \
           chown -R www-data:www-data /var/www/axialy-admin"

        # ---------- .env ----------
        cat > env <<EOF
        DB_HOST=${{ secrets.DB_HOST }}
        DB_PORT=${{ secrets.DB_PORT }}
        DB_NAME=axialy_admin
        DB_USER=${{ secrets.DB_USER }}
        DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        UI_DB_HOST=${{ secrets.DB_HOST }}
        UI_DB_PORT=${{ secrets.DB_PORT }}
        UI_DB_NAME=axialy_ui
        UI_DB_USER=${{ secrets.DB_USER }}
        UI_DB_PASSWORD=${{ secrets.DB_PASSWORD }}

        ADMIN_DEFAULT_USER=${{ secrets.ADMIN_DEFAULT_USER }}
        ADMIN_DEFAULT_EMAIL=${{ secrets.ADMIN_DEFAULT_EMAIL }}
        ADMIN_DEFAULT_PASSWORD=${{ secrets.ADMIN_DEFAULT_PASSWORD }}
        EOF
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no env root@"$DROPLET_IP":/var/www/axialy-admin/.env
        ./ssh.exp ~/.ssh/deploy_key "$DROPLET_IP" "$KEY_PASS" \
          "chown www-data:www-data /var/www/axialy-admin/.env && \
           chmod 640 /var/www/axialy-admin/.env && \
           systemctl restart nginx php8.1-fpm"

    # ───────────────────────────────────────── smoke test ──
    - name: “smoke-test → / admin_login.php”
      env:
        IP: ${{ steps.tf.outputs.droplet_ip }}
      run: |
        for i in {1..20}; do
          code=$(curl -s -o /dev/null -w '%{http_code}' "http://$IP/admin_login.php" || true)
          if [ "$code" = 200 ]; then
            echo "✓ Application responded with HTTP 200"
            exit 0
          fi
          echo "App not ready (HTTP $code) – retry $i/20"
          sleep 5
        done
        echo "::error::Application did not come up"; exit 1
