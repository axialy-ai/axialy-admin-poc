name: Axialy Admin UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "Droplet hostname"
        required: true
        default: "axialy-admin-prod"
      region:
        description: "DO region (e.g. nyc3, sfo3, fra1)"
        default: sfo3
      size:
        description: "Droplet size"
        default: s-1vcpu-2gb

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # 1  Checkout repo
    - name: Checkout code
      uses: actions/checkout@v4

    # 2  Terraform – create / update droplet + firewall
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Terraform init
      working-directory: infra/droplet
      run: terraform init -input=false
      env:
        TF_VAR_do_token: ${{ secrets.DO_PAT }}

    - name: Terraform apply
      id: tfout
      working-directory: infra/droplet
      run: |
        terraform apply -auto-approve -input=false \
          -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
          -var="region=${{ github.event.inputs.region }}" \
          -var="droplet_size=${{ github.event.inputs.size }}" \
          -var="ssh_key_fingerprint=${{ secrets.DO_SSH_KEY_FINGERPRINT }}" \
          -var="db_host=${{ secrets.DB_HOST }}" \
          -var="db_port=${{ secrets.DB_PORT }}" \
          -var="db_user=${{ secrets.DB_USER }}" \
          -var="db_password=${{ secrets.DB_PASSWORD }}" \
          -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
          -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
          -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}"
        echo "droplet_ip=$(terraform output -raw droplet_ip)"  >> "$GITHUB_OUTPUT"
        echo "droplet_id=$(terraform output -raw droplet_id)"  >> "$GITHUB_OUTPUT"
      env:
        TF_VAR_do_token: ${{ secrets.DO_PAT }}

    # 3  Wait until SSH comes up
    - name: Wait for SSH port 22
      timeout-minutes: 10
      env:
        IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        echo -n "⏳ Waiting for port 22 on $IP"
        for i in {1..60}; do
          nc -z -w 3 "$IP" 22 && echo " OK" && exit 0
          echo -n "."
          sleep 5
        done
        echo ""
        echo "::error::Droplet never became reachable on port 22"
        exit 1

    # 4  Copy artefacts + run deploy.sh
    - name: Configure SSH and deploy
      env:
        DROPLET_IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        # ── SSH prep ────────────────────────────────────────────
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        echo "${{ secrets.DROPLET_SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts 2>/dev/null || true

        sudo apt-get update -qq
        sudo apt-get install -y expect

        # helper wrappers (expect → passphrase unlock)
        cat > ssh_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 600
        set key  [lindex $argv 0]
        set host [lindex $argv 1]
        set pass [lindex $argv 2]
        set cmd  [lindex $argv 3]
        spawn ssh -i $key -o StrictHostKeyChecking=no root@$host $cmd
        expect {
          "Enter passphrase for key*" { send "$pass\r"; exp_continue }
          eof
        }
        EOF
        chmod +x ssh_with_pass.exp

        cat > scp_with_pass.exp <<'EOF'
        #!/usr/bin/expect -f
        set timeout 600
        set key  [lindex $argv 0]
        set src  [lindex $argv 1]
        set dst  [lindex $argv 2]
        set pass [lindex $argv 3]
        spawn scp -i $key -o StrictHostKeyChecking=no $src $dst
        expect {
          "Enter passphrase for key*" { send "$pass\r"; exp_continue }
          eof
        }
        EOF
        chmod +x scp_with_pass.exp

        # ── Generate artefacts ──────────────────────────────────
        ( cd axialy-admin-product && tar -czf /tmp/axialy-admin.tar.gz . )

        # copy deploy script from repo to runner workspace
        cp scripts/deploy.sh ./deploy.sh
        chmod +x deploy.sh

        echo "▶ Uploading artefacts"
        ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-admin.tar.gz \
            root@$DROPLET_IP:/tmp/ "${{ secrets.DROPLET_SSH_PASSPHRASE }}"
        ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh \
            root@$DROPLET_IP:/tmp/deploy.sh "${{ secrets.DROPLET_SSH_PASSPHRASE }}"

        echo "▶ Running deploy.sh on droplet"
        ./ssh_with_pass.exp ~/.ssh/deploy_key $DROPLET_IP \
            "${{ secrets.DROPLET_SSH_PASSPHRASE }}" "bash /tmp/deploy.sh"

    # 5  Smoke-test HTTP
    - name: Verify deployment (HTTP 200)
      env:
        IP: ${{ steps.tfout.outputs.droplet_ip }}
      run: |
        echo -n "⏳ Waiting for nginx to answer"
        for i in {1..60}; do
          code=$(curl -s -o /dev/null -w "%{http_code}" http://$IP/admin_login.php || true)
          if [ "$code" = "200" ]; then
            echo " – success!"
            exit 0
          fi
          echo -n "."
          sleep 3
        done
        echo ""
        echo "::error::nginx never returned HTTP 200 – check the droplet logs."
        exit 1

    # 6  Friendly summary
    - name: Display deployment info
      run: |
        echo "========================================"
        echo "Axialy Admin deployed!"
        echo "Open   → http://${{ steps.tfout.outputs.droplet_ip }}/admin_login.php"
        echo "SSH    → root@${{ steps.tfout.outputs.droplet_ip }}"
        echo "========================================"
