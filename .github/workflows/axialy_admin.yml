name: Axialy Admin UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "EC2 Name tag"
        required: true
        default: axialy-admin-prod
      region:
        description: "AWS region (e.g. us-west-2)"
        required: true
        default: us-west-2
      size:
        description: "EC2 instance type"
        required: true
        default: t3.small

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ github.event.inputs.region }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            axialy-admin-product
            infra/ec2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        working-directory: infra/ec2
        run: terraform init -input=false

      - name: Terraform apply
        id: tfout
        working-directory: infra/ec2
        run: |
          terraform apply -auto-approve -input=false \
            -var="instance_name=${{ github.event.inputs.droplet_name }}" \
            -var="instance_type=${{ github.event.inputs.size }}" \
            -var="key_name=${{ secrets.EC2_KEY_PAIR }}" \
            -var="elastic_ip_allocation_id=${{ secrets.EC2_ELASTIC_IP_ALLOCATION_ID }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
            -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
            -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
            -var="component_tag=admin" \
            -var="smtp_host=${{ secrets.SMTP_HOST }}" \
            -var="smtp_port=${{ secrets.SMTP_PORT }}" \
            -var="smtp_user=${{ secrets.SMTP_USER }}" \
            -var="smtp_password=${{ secrets.SMTP_PASSWORD }}"
          echo "public_ip=$(terraform output -raw public_ip)" >> "$GITHUB_OUTPUT"

      - name: Wait for instance SSH
        run: sleep 60

      - name: Configure SSH helpers
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ steps.tfout.outputs.public_ip }}" >> ~/.ssh/known_hosts 2>/dev/null || true
          sudo apt-get update -qq
          sudo apt-get install -y expect

      - name: Bootstrap instance and deploy code
        env:
          HOST: ${{ steps.tfout.outputs.public_ip }}
        run: |
          cat > ssh_with_pass.exp <<'EOF'
#!/usr/bin/expect -f
set timeout 300
set key  [lindex $argv 0]
set host [lindex $argv 1]
set pph  [lindex $argv 2]
set cmd  [lindex $argv 3]
spawn ssh -i $key -o StrictHostKeyChecking=no ubuntu@$host $cmd
expect {
  "Enter passphrase for key*" { send "$pph\r"; exp_continue }
  eof
}
EOF
          chmod +x ssh_with_pass.exp

          cat > scp_with_pass.exp <<'EOF'
#!/usr/bin/expect -f
set timeout 300
set key [lindex $argv 0]
set src [lindex $argv 1]
set dst [lindex $argv 2]
set pph [lindex $argv 3]
spawn scp -i $key -o StrictHostKeyChecking=no $src $dst
expect {
  "Enter passphrase for key*" { send "$pph\r"; exp_continue }
  eof
}
EOF
          chmod +x scp_with_pass.exp

          cat > deploy.sh <<'DEPLOY'
#!/bin/bash
set -e
until apt-get -yq update; do sleep 5; done
until DEBIAN_FRONTEND=noninteractive apt-get -yq install nginx php8.1-fpm php8.1-mysql php8.1-mbstring php8.1-xml php8.1-curl php8.1-zip php8.1-gd; do sleep 5; done
sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
systemctl restart php8.1-fpm
cat > /etc/nginx/sites-available/axialy-admin <<'NGINX'
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  root /var/www/axialy-admin;
  index index.php index.html;
  server_name _;
  location / { try_files $uri $uri/ /index.php?$query_string; }
  location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
  }
  location ~ /\. { deny all; }
  add_header X-Frame-Options "SAMEORIGIN";
  add_header X-Content-Type-Options "nosniff";
  add_header X-XSS-Protection "1; mode=block";
}
NGINX
ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t
systemctl restart nginx
DEPLOY

          ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh ubuntu@$HOST:/tmp/deploy.sh "${{ secrets.EC2_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $HOST "${{ secrets.EC2_SSH_PASSPHRASE }}" "chmod +x /tmp/deploy.sh && sudo bash /tmp/deploy.sh"

          cd axialy-admin-product && tar -czf /tmp/axialy-admin.tar.gz . && cd ..
          ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-admin.tar.gz ubuntu@$HOST:/tmp/ "${{ secrets.EC2_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $HOST "${{ secrets.EC2_SSH_PASSPHRASE }}" "sudo mkdir -p /var/www/axialy-admin && sudo tar -xzf /tmp/axialy-admin.tar.gz -C /var/www/axialy-admin && sudo chown -R www-data:www-data /var/www/axialy-admin && sudo find /var/www/axialy-admin -type d -exec chmod 755 {} \; && sudo find /var/www/axialy-admin -type f -exec chmod 644 {} \; && sudo mv /var/www/axialy-admin/admin_login.http.php /var/www/axialy-admin/admin_login.php && sudo systemctl restart php8.1-fpm nginx"

          rm -f deploy.sh /tmp/axialy-admin.tar.gz ssh_with_pass.exp scp_with_pass.exp

      - name: Verify deployment
        run: |
          CODE=$(curl -s -o /dev/null -w '%{http_code}' http://${{ steps.tfout.outputs.public_ip }}/admin_login.php || echo 000)
          [ "$CODE" = "200" ]

      - name: Deployment summary
        run: |
          echo "========================================"
          echo "Axialy Admin deployed successfully!"
          echo "URL   : http://${{ steps.tfout.outputs.public_ip }}/admin_login.php"
          echo "Name  : ${{ github.event.inputs.droplet_name }}"
          echo "IP    : ${{ steps.tfout.outputs.public_ip }}"
          echo "Type  : ${{ github.event.inputs.size }}"
          echo "Region: ${{ github.event.inputs.region }}"
          echo "========================================"
