name: Axialy Admin UI

on:
  workflow_dispatch:
    inputs:
      droplet_name:
        description: "EC2 Name tag"
        required: true
        default: "axialy-admin-prod"
      region:
        description: "AWS region (e.g. us-west-2)"
        default: us-west-2
      size:
        description: "EC2 instance class"
        default: t3.small

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION:    ${{ github.event.inputs.region }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            axialy-admin-product
            infra/ec2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6
          terraform_wrapper: false

      - name: Terraform init
        working-directory: infra/ec2
        run: terraform init -input=false

      - name: Terraform apply
        id: tfout
        working-directory: infra/ec2
        run: |
          terraform apply -auto-approve -input=false \
            -var="instance_name=${{ github.event.inputs.droplet_name }}" \
            -var="instance_type=${{ github.event.inputs.size }}" \
            -var="key_name=${{ secrets.EC2_KEY_PAIR }}" \
            -var="elastic_ip_allocation_id=${{ secrets.EC2_ELASTIC_IP_ALLOCATION_ID }}" \
            -var="db_host=${{ secrets.DB_HOST }}" \
            -var="db_port=${{ secrets.DB_PORT }}" \
            -var="db_user=${{ secrets.DB_USER }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="admin_default_user=${{ secrets.ADMIN_DEFAULT_USER }}" \
            -var="admin_default_email=${{ secrets.ADMIN_DEFAULT_EMAIL }}" \
            -var="admin_default_password=${{ secrets.ADMIN_DEFAULT_PASSWORD }}" \
            -var="component_tag=admin" \
            -var="smtp_host=${{ secrets.SMTP_HOST }}" \
            -var="smtp_port=${{ secrets.SMTP_PORT }}" \
            -var="smtp_user=${{ secrets.SMTP_USER }}" \
            -var="smtp_password=${{ secrets.SMTP_PASSWORD }}"

          echo "public_ip=$(terraform output -raw public_ip)" >>"$GITHUB_OUTPUT"

      - name: Wait for instance to be ready
        run: sleep 60

      - name: Configure SSH and Deploy
        env:
          HOST: ${{ steps.tfout.outputs.public_ip }}
        run: |
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts 2>/dev/null || true
          sudo apt-get update -qq
          sudo apt-get install -y expect
          cat > ssh_with_pass.exp <<'EOF'
#!/usr/bin/expect -f
set timeout 300
set ssh_key [lindex $argv 0]
set host    [lindex $argv 1]
set passph  [lindex $argv 2]
set cmd     [lindex $argv 3]
spawn ssh -i $ssh_key -o StrictHostKeyChecking=no ubuntu@$host $cmd
expect {
  "Enter passphrase for key*" { send "$passph\r"; exp_continue }
  eof
}
EOF
          chmod +x ssh_with_pass.exp
          cat > scp_with_pass.exp <<'EOF'
#!/usr/bin/expect -f
set timeout 300
set ssh_key [lindex $argv 0]
set source  [lindex $argv 1]
set dest    [lindex $argv 2]
set passph  [lindex $argv 3]
spawn scp -i $ssh_key -o StrictHostKeyChecking=no $source $dest
expect {
  "Enter passphrase for key*" { send "$passph\r"; exp_continue }
  eof
}
EOF
          chmod +x scp_with_pass.exp
          cat > deploy.sh <<'DEPLOY_SCRIPT'
#!/bin/bash
set -e
wait_for_apt() {
  while fuser /var/lib/apt/lists/lock >/dev/null 2>&1 ||
        fuser /var/lib/dpkg/lock >/dev/null 2>&1     ||
        fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 ; do
    sleep 5
  done
}
wait_for_apt
apt-get update -qq
wait_for_apt
apt-get install -y nginx php8.1-fpm php8.1-mysql php8.1-mbstring php8.1-xml php8.1-curl php8.1-zip php8.1-gd
sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php/8.1/fpm/php.ini
systemctl restart php8.1-fpm
cat > /etc/nginx/sites-available/axialy-admin <<'NGINX_CONF'
server {
  listen 80 default_server;
  listen [::]:80 default_server;
  root /var/www/axialy-admin;
  index index.php index.html;
  server_name _;
  location / { try_files \$uri \$uri/ /index.php?\$query_string; }
  location ~ \.php$ {
    include snippets/fastcgi-php.conf;
    fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
  }
  location ~ /\. { deny all; }
  add_header X-Frame-Options "SAMEORIGIN" always;
  add_header X-Content-Type-Options "nosniff" always;
  add_header X-XSS-Protection "1; mode=block" always;
}
NGINX_CONF
ln -sf /etc/nginx/sites-available/axialy-admin /etc/nginx/sites-enabled/
rm -f /etc/nginx/sites-enabled/default
nginx -t
systemctl restart nginx
DEPLOY_SCRIPT
          ./scp_with_pass.exp ~/.ssh/deploy_key deploy.sh ubuntu@$HOST:/tmp/deploy.sh "${{ secrets.EC2_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $HOST "${{ secrets.EC2_SSH_PASSPHRASE }}" "chmod +x /tmp/deploy.sh && sudo bash /tmp/deploy.sh"
          cd axialy-admin-product
          tar -czf /tmp/axialy-admin.tar.gz .
          cd ..
          ./scp_with_pass.exp ~/.ssh/deploy_key /tmp/axialy-admin.tar.gz ubuntu@$HOST:/tmp/ "${{ secrets.EC2_SSH_PASSPHRASE }}"
          ./ssh_with_pass.exp ~/.ssh/deploy_key $HOST "${{ secrets.EC2_SSH_PASSPHRASE }}" "sudo mkdir -p /var/www/axialy-admin && sudo tar -xzf /tmp/axialy-admin.tar.gz -C /var/www/axialy-admin && sudo chown -R www-data:www-data /var/www/axialy-admin && sudo find /var/www/axialy-admin -type d -exec chmod 755 {} \; && sudo find /var/www/axialy-admin -type f -exec chmod 644 {} \; && sudo mv /var/www/axialy-admin/admin_login.http.php /var/www/axialy-admin/admin_login.php && sudo systemctl restart php8.1-fpm nginx"
          rm -f deploy.sh /tmp/axialy-admin.tar.gz ssh_with_pass.exp scp_with_pass.exp

      - name: Verify deployment
        run: |
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ steps.tfout.outputs.public_ip }}/admin_login.php || echo 000)
          if [ "$RESPONSE" != "200" ]; then
            echo "Application returned HTTP $RESPONSE"
            exit 1
          fi

      - name: Display deployment info
        run: |
          echo "========================================"
          echo "Axialy Admin deployed successfully!"
          echo "========================================"
          echo "Access your application at:"
          echo "  http://${{ steps.tfout.outputs.public_ip }}/admin_login.php"
          echo ""
          echo "Instance Details:"
          echo "  Name : ${{ github.event.inputs.droplet_name }}"
          echo "  IP   : ${{ steps.tfout.outputs.public_ip }}"
          echo "  Type : ${{ github.event.inputs.size }}"
          echo "========================================"
